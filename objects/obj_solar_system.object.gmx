<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

offset_x = 0
offset_y = 0

planet_orbit[0] = 8
planet_orbit[1] = 200
planet_orbit[2] = 300
planet_orbit[3] = 400
planet_orbit[4] = 500
planet_orbit[5] = 700
planet_orbit[6] = 850
planet_orbit[7] = 1000
planet_orbit[8] = 1200

for(var i = 1; i &lt;= planet_orbit[0]; i++)
    { planet[i] = instance_create(0, 0, obj_planet); planet[i].image_index = i; }

planet[1].radius = 20
planet[2].radius = 50
planet[3].radius = 50
planet[4].radius = 25
planet[5].radius = 100
planet[6].radius = 150
planet[7].radius = 65
planet[8].radius = 65

planet_speed[1] = 360 / 88    * 4
planet_speed[2] = 360 / 224   * 4
planet_speed[3] = 360 / 365   * 4
planet_speed[4] = 360 / 625   * 4
planet_speed[5] = 360 / 1250  * 4
planet_speed[6] = 360 / 2500  * 4
planet_speed[7] = 360 / 5000  * 4
planet_speed[8] = 360 / 10000 * 4

global_scale = 1

btn_inst = -1

randomize()
planet_angle[1] = random(45) - 22;
for(var i = 2; i &lt;= planet_orbit[0]; i++)
    { planet_angle[i] = planet_angle[i - 1] + random(90) - 45; }
    
onClickPhase = false

lmp_x = 0
lmp_y = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if(!obj_solar_system.onClickPhase)
{
    if(btn_inst == -1)
    {
        offset_x = obj_stars.x
        offset_y = obj_stars.y
    }
    else if(!instance_exists(obj_planet_inspect))
    {
        if(mouse_check_button(mb_left))
        {
            offset_x = clamp(offset_x + mouse_x - lmp_x, - room_width / 2, room_width / 2)
            offset_y = clamp(offset_y + mouse_y - lmp_y, - room_height / 2, room_height / 2)
        }
    }
    
    lmp_x = mouse_x
    lmp_y = mouse_y
}
else {
    if(distance_to_point(room_width / 2, room_height / 2) &gt;= adelta_time * 1000)
        move_towards_point(room_width / 2, room_height / 2, adelta_time * 1000)
    else
    {
        x = room_width / 2
        y = room_height / 2
        speed = 0
        if(onClickPhase)
            if(global_scale &gt; 0.45)
                global_scale -= adelta_time * 0.8
            else
            {
                global_scale = 0.45
                onClickPhase = false
            }
    }

    if(btn_inst == -1)
    {
        btn_inst = instance_create(1700, 1000, obj_button)
        btn_inst.txt_instance.text = "Inapoi"

        btn_inst.width = 200
        btn_inst.height = 100
        btn_inst.border_width = 2
        btn_inst.click = restart_room
        
        offset_x = 0
        offset_y = 0
    }
}

for(var i = 1; i &lt;= planet_orbit[0]; i++)
    planet_angle[i] += planet_speed[i] * adelta_time
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom

if(global_scale &gt; 0.3)
    if(!(distance_to_point(room_width / 2, room_height / 2) &gt;= adelta_time * 1000))
        if(btn_inst != -1)
            global_scale -= 5 * adelta_time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom

if(global_scale &lt; 3)
    if(!(distance_to_point(room_width / 2, room_height / 2) &gt;= adelta_time * 1000))
        if(btn_inst != -1)
            global_scale += 5 * adelta_time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

draw_set_color(c_white)

draw_sprite_ext(spr_solarsystem, 0, offset_x + x, offset_y + y, global_scale, global_scale, 0, c_white, 1)

for(var i = 1; i &lt;= planet_orbit[0]; i++)
{
    planet[i].x = offset_x + x + dcos(planet_angle[i]) * planet_orbit[i] * global_scale
    planet[i].y = offset_y + y + dsin(planet_angle[i]) * planet_orbit[i] * global_scale
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
